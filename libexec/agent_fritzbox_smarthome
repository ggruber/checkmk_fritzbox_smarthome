#!/usr/bin/env python3

import argparse
import json
import hashlib
import xml.etree.ElementTree as ET
import requests
import sys
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def parse_args():
    parser = argparse.ArgumentParser(description="Special Agent for Fritzbox Smarthome")
    parser.add_argument("--host", required=True)
    parser.add_argument("--username", required=True)
    parser.add_argument("--password", required=True)
    parser.add_argument("--port", type=int, default=443)
    parser.add_argument("--protocol", choices=["http", "https"], default="https")
    parser.add_argument("--ignore-ssl", action="store_true", default=False)
    parser.add_argument("--debug", action="store_true", default=False)
    return parser.parse_args()


def login(base_url, username, password, verify_ssl, debug):
    sid_url = f"{base_url}/login_sid.lua"
    r = requests.get(sid_url, verify=verify_ssl)
    xml = ET.fromstring(r.content)

    challenge = xml.find("Challenge").text
    blocktime = int(xml.find("BlockTime").text)
    if blocktime > 0:
        raise Exception(f"Login blocked for {blocktime} seconds")

    # Prepare challenge-response
    challenge_response = challenge + "-" + hashlib.md5(
        (challenge + "-" + password).encode("utf-16le")
    ).hexdigest()

    payload = {
        "username": username,
        "response": challenge_response
    }

    r = requests.get(sid_url, params=payload, verify=verify_ssl)
    xml = ET.fromstring(r.content)
    sid = xml.find("SID").text

    if sid == "0000000000000000":
        raise Exception("Authentication failed")

    return sid


def fetch_device_info(base_url, sid, verify_ssl, debug):
    r = requests.get(
        f"{base_url}/webservices/homeautoswitch.lua",
        params={"switchcmd": "getdevicelistinfos", "sid": sid},
        verify=verify_ssl,
    )
    if debug:
        print("<<<fritzbox_smarthome>>>")
        print("RAW:", r.text)

    devices = []
    root = ET.fromstring(r.content)
    for device in root.findall("device"):
        dev = {
            "id": device.get("id"),
            "manufacturer": device.get("manufacturer"),
            "productname": device.get("productname"),
            "fwversion": device.get("fwversion"),
            "functionbitmask": device.get("functionbitmask"),
            "identifier": device.get("identifier"),
            "present": device.findtext("present"),
            "name": device.findtext("name"),
            "battery": device.findtext("battery"),
            "batterylow": device.findtext("batterylow"),
            "data": {}
        }

        for sub in device:
            if sub.tag in ("present", "name"):
                continue
            for elem in sub:
                if sub.tag not in dev["data"]:
                    dev["data"][sub.tag] = {}
                dev["data"][sub.tag][elem.tag] = elem.text
                

        devices.append(dev)

    return devices


def main():
    args = parse_args()
    verify_ssl = not args.ignore_ssl
    base_url = f"{args.protocol}://{args.host}:{args.port}"

    try:
        sid = login(base_url, args.username, args.password, verify_ssl, args.debug)
        device_data = fetch_device_info(base_url, sid, verify_ssl, args.debug)

        print("<<<fritzbox_smarthome:json>>>")
        print(json.dumps(device_data, indent=None if not args.debug else 2))

    except Exception as e:
        print("<<<fritzbox_smarthome:json>>>")
        print(json.dumps({"error": str(e)}))
        sys.exit(1)


if __name__ == "__main__":
    main()
